datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model File {
  id   String @id @unique @default(cuid())
  blob Bytes

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  image     Image?
}

model Image {
  file   File   @relation(fields: [fileId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  fileId String @unique

  contentType String
  altText     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User?
}

model Role {
  id   String @id @unique @default(cuid())
  name String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users       User[]
  permissions Permission[]
}

model Permission {
  id   String @id @unique @default(cuid())
  name String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  roles Role[]
}

model User {
  id       String  @id @unique @default(cuid())
  email    String  @unique
  username String  @unique
  name     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  image   Image?  @relation(fields: [imageId], references: [fileId])
  imageId String? @unique

  password     Password?
  notes        Note[]
  roles        Role[]
  session      Session[]
  createdClubs Club[]           @relation(name: "CreatedClubs")
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Verification {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  /// The type of verification, e.g. "email" or "phone"
  type String

  /// The thing we're trying to verify, e.g. a user's email or phone number
  target String

  /// The secret key used to generate the otp
  secret String

  /// The algorithm used to generate the otp
  algorithm String

  /// The number of digits in the otp
  digits Int

  /// The number of seconds the otp is valid for
  period Int

  /// When it's safe to delete this verification
  expiresAt DateTime?

  @@unique([target, type])
}

model Session {
  id             String   @id @default(cuid())
  createdAt      DateTime @default(now())
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  expirationDate DateTime
}

model Note {
  id        String   @id @unique @default(cuid())
  title     String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ownerId String

  // our user search orders by recently owners who have recently updated notes
  // so indexing on the owner ID helps with that (a LOT).
  @@index([ownerId])
}

model Club {
  id          String           @id @unique @default(cuid())
  name        String
  description String
  createdBy   User             @relation(fields: [createdById], references: [id], name: "CreatedClubs")
  createdById String
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  users       Member[]
  seasons     Season[]
  attandance  MemberAttendance[]
  teams       Team[]
}


model Member {
  id String @id @unique @default(cuid())
  name String
  email String
  mobile String
  clubs        Club[]
  attendance   MemberAttendance[]
  matches      PlayerMatches[]
}


// model MemberClubs {
//   member   Member   @relation(fields: [memberId], references: [id])
//   memberId String
//   club   Club   @relation(fields: [clubId], references: [id])
//   clubId String

//   @@id([memberId, clubId])
// }

model Season {
  id         String           @id @unique @default(cuid())
  name       String
  start      DateTime
  end        DateTime
  club       Club             @relation(fields: [clubId], references: [id])
  clubId     String
  attendance MemberAttendance[]
  teams      Team[]
}

model MemberAttendance {
  member         Member     @relation(fields: [memberId], references: [id])
  memberId         String
  club           Club     @relation(fields: [clubId], references: [id])
  clubId         String
  season         Season   @relation(fields: [seasonId], references: [id])
  seasonId       String
  attendanceDate DateTime
  /// Member Paid Guest or Unpaid Guest
  type           String

  @@id([memberId, clubId, seasonId])
}



model Team {
  id              String          @id @unique @default(cuid())
  name            String
  club            Club            @relation(fields: [clubId], references: [id])
  clubId          String
  season          Season          @relation(fields: [seasonId], references: [id])
  seasonId        String
  teamType        String?
  teamMatch       Match[]         @relation(name: "Match")
  oppositionMatch Match[]         @relation(name: "OppositionMatch")
  players         PlayerMatches[]
}

model Match {
  id               String          @id @unique @default(cuid())
  team             Team            @relation(fields: [teamId], references: [id], name: "Match")
  teamId           String
  oppositionTeam   Team            @relation(fields: [oppositionTeamId], references: [id], name: "OppositionMatch")
  oppositionTeamId String
  players          PlayerMatches[]
}

model PlayerMatches {
  player   Member   @relation(fields: [playerId], references: [id])
  playerId String
  match    Match  @relation(fields: [matchId], references: [id])
  matchId  String
  team     Team   @relation(fields: [teamId], references: [id])
  teamId   String

  @@id([playerId, matchId, teamId])
}
